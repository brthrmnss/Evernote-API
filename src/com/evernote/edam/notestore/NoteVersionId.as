/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.notestore 
{


import org.apache.thrift.Set;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

  /**
   * Identfying information about previous versions of a note that are backed up
   * within Evernote's servers.  Used in the return value of the listNoteVersions
   * call.
   * 
   * <dl>
   *  <dt>updateSequenceNum</dtd>
   *  <dd>
   *    The update sequence number for the Note when it last had this content.
   *    This serves to uniquely identify each version of the note, since USN
   *    values are unique within an account for each update.
   *  </dd>
   *  <dt>updated</dtd>
   *  <dd>
   *    The 'updated' time that was set on the Note when it had this version
   *    of the content.  This is the user-modifiable modification time on the
   *    note, so it's not reliable for guaranteeing the order of various
   *    versions.  (E.g. if someone modifies the note, then changes this time
   *    manually into the past and then updates the note again.)
   *  </dd>
   *  <dt>serviceUpdated</dtd>
   *  <dd>
   *    A timestamp that holds the date and time when the Note that had this
   *    version of the content was saved or synchronized on the service.  This
   *    may be different than the 'updated' time visible on the note in a client,
   *    which is a user-editable field that is (therefore) not reliable for
   *    determining the order of changes.
   *  </dd>
   * </dl>
   */
  public class NoteVersionId implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("NoteVersionId");
    private static const UPDATE_SEQUENCE_NUM_FIELD_DESC:TField = new TField("updateSequenceNum", TType.I32, 1);
    private static const UPDATED_FIELD_DESC:TField = new TField("updated", TType.DOUBLE, 2);
    private static const SERVICE_UPDATED_FIELD_DESC:TField = new TField("serviceUpdated", TType.DOUBLE, 3);

    private var _updateSequenceNum:int;
    public static const UPDATESEQUENCENUM:int = 1;
    private var _updated:Number;
    public static const UPDATED:int = 2;
    private var _serviceUpdated:Number;
    public static const SERVICEUPDATED:int = 3;

    private var __isset_updateSequenceNum:Boolean = false;
    private var __isset_updated:Boolean = false;
    private var __isset_serviceUpdated:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[UPDATESEQUENCENUM] = new FieldMetaData("updateSequenceNum", TFieldRequirementType.REQUIRED, 
          new FieldValueMetaData(TType.I32));
      metaDataMap[UPDATED] = new FieldMetaData("updated", TFieldRequirementType.REQUIRED, 
          new FieldValueMetaData(TType.DOUBLE));
      metaDataMap[SERVICEUPDATED] = new FieldMetaData("serviceUpdated", TFieldRequirementType.REQUIRED, 
          new FieldValueMetaData(TType.DOUBLE));
    }
    {
      FieldMetaData.addStructMetaDataMap(NoteVersionId, metaDataMap);
    }

    public function NoteVersionId() {
    }

    public function get updateSequenceNum():int {
      return this._updateSequenceNum;
    }

    public function set updateSequenceNum(updateSequenceNum:int):void {
      this._updateSequenceNum = updateSequenceNum;
      this.__isset_updateSequenceNum = true;
    }

    public function unsetUpdateSequenceNum():void {
      this.__isset_updateSequenceNum = false;
    }

    // Returns true if field updateSequenceNum is set (has been asigned a value) and false otherwise
    public function isSetUpdateSequenceNum():Boolean {
      return this.__isset_updateSequenceNum;
    }

    public function get updated():Number {
      return this._updated;
    }

    public function set updated(updated:Number):void {
      this._updated = updated;
      this.__isset_updated = true;
    }

    public function unsetUpdated():void {
      this.__isset_updated = false;
    }

    // Returns true if field updated is set (has been asigned a value) and false otherwise
    public function isSetUpdated():Boolean {
      return this.__isset_updated;
    }

    public function get serviceUpdated():Number {
      return this._serviceUpdated;
    }

    public function set serviceUpdated(serviceUpdated:Number):void {
      this._serviceUpdated = serviceUpdated;
      this.__isset_serviceUpdated = true;
    }

    public function unsetServiceUpdated():void {
      this.__isset_serviceUpdated = false;
    }

    // Returns true if field serviceUpdated is set (has been asigned a value) and false otherwise
    public function isSetServiceUpdated():Boolean {
      return this.__isset_serviceUpdated;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case UPDATESEQUENCENUM:
        if (value == null) {
          unsetUpdateSequenceNum();
        } else {
          this.updateSequenceNum = value;
        }
        break;

      case UPDATED:
        if (value == null) {
          unsetUpdated();
        } else {
          this.updated = value;
        }
        break;

      case SERVICEUPDATED:
        if (value == null) {
          unsetServiceUpdated();
        } else {
          this.serviceUpdated = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case UPDATESEQUENCENUM:
        return this.updateSequenceNum;
      case UPDATED:
        return this.updated;
      case SERVICEUPDATED:
        return this.serviceUpdated;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case UPDATESEQUENCENUM:
        return isSetUpdateSequenceNum();
      case UPDATED:
        return isSetUpdated();
      case SERVICEUPDATED:
        return isSetServiceUpdated();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case UPDATESEQUENCENUM:
            if (field.type == TType.I32) {
              this.updateSequenceNum = iprot.readI32();
              this.__isset_updateSequenceNum = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case UPDATED:
            if (field.type == TType.DOUBLE) {
              this.updated = iprot.readDouble();
              this.__isset_updated = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SERVICEUPDATED:
            if (field.type == TType.DOUBLE) {
              this.serviceUpdated = iprot.readDouble();
              this.__isset_serviceUpdated = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      if (!__isset_updateSequenceNum) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'updateSequenceNum' was not found in serialized data! Struct: " + toString());
      }
      if (!__isset_updated) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'updated' was not found in serialized data! Struct: " + toString());
      }
      if (!__isset_serviceUpdated) {
        throw new TProtocolError(TProtocolError.UNKNOWN, "Required field 'serviceUpdated' was not found in serialized data! Struct: " + toString());
      }
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(UPDATE_SEQUENCE_NUM_FIELD_DESC);
      oprot.writeI32(this.updateSequenceNum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATED_FIELD_DESC);
      oprot.writeDouble(this.updated);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SERVICE_UPDATED_FIELD_DESC);
      oprot.writeDouble(this.serviceUpdated);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("NoteVersionId(");
      var first:Boolean = true;

      ret += "updateSequenceNum:";
      ret += this.updateSequenceNum;
      first = false;
      if (!first) ret +=  ", ";
      ret += "updated:";
      ret += this.updated;
      first = false;
      if (!first) ret +=  ", ";
      ret += "serviceUpdated:";
      ret += this.serviceUpdated;
      first = false;
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // alas, we cannot check 'updateSequenceNum' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'updated' because it's a primitive and you chose the non-beans generator.
      // alas, we cannot check 'serviceUpdated' because it's a primitive and you chose the non-beans generator.
      // check that fields of type enum have valid values
    }

  }

}
