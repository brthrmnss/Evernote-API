/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.evernote.edam.type {

import org.apache.thrift.Set;
import flash.utils.Dictionary;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

  /**
   * A link in an users account that refers them to a public or individual share in
   * another user's account.
   * 
   * <dl>
   * <dt>id</dt>
   * <dd>the primary identify of a linked notebook only used for deleting.</dd>
   * 
   * <dt>shareName</dt>
   * <dd>the display name of the shared notebook.
   *   The link owner can change this.</dd>
   * 
   * <dt>username</dt>
   * <dd>the username of the user who owns the shared or public notebook</dd>
   * 
   * <dt>shardId</dt>
   * <dd>the shard ID of the notebook if the notebook is not public</dt>
   * 
   * <dt>shareKey</dt>
   * <dd>the secret key that provides access to the shared notebook</dd>
   * 
   * <dt>uri</dt>
   * <dd>the identifier of the public notebook</dd>
   */
  public class LinkedNotebook implements TBase   {
    private static const STRUCT_DESC:TStruct = new TStruct("LinkedNotebook");
    private static const ID_FIELD_DESC:TField = new TField("id", TType.DOUBLE, 1);
    private static const SHARE_NAME_FIELD_DESC:TField = new TField("shareName", TType.STRING, 2);
    private static const USERNAME_FIELD_DESC:TField = new TField("username", TType.STRING, 3);
    private static const SHARD_ID_FIELD_DESC:TField = new TField("shardId", TType.STRING, 4);
    private static const SHARE_KEY_FIELD_DESC:TField = new TField("shareKey", TType.STRING, 5);
    private static const URI_FIELD_DESC:TField = new TField("uri", TType.STRING, 6);

    private var _id:Number;
    public static const ID:int = 1;
    private var _shareName:String;
    public static const SHARENAME:int = 2;
    private var _username:String;
    public static const USERNAME:int = 3;
    private var _shardId:String;
    public static const SHARDID:int = 4;
    private var _shareKey:String;
    public static const SHAREKEY:int = 5;
    private var _uri:String;
    public static const URI:int = 6;

    private var __isset_id:Boolean = false;

    public static const metaDataMap:Dictionary = new Dictionary();
    {
      metaDataMap[ID] = new FieldMetaData("id", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.DOUBLE));
      metaDataMap[SHARENAME] = new FieldMetaData("shareName", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[USERNAME] = new FieldMetaData("username", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[SHARDID] = new FieldMetaData("shardId", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[SHAREKEY] = new FieldMetaData("shareKey", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
      metaDataMap[URI] = new FieldMetaData("uri", TFieldRequirementType.OPTIONAL, 
          new FieldValueMetaData(TType.STRING));
    }
    {
      FieldMetaData.addStructMetaDataMap(LinkedNotebook, metaDataMap);
    }

    public function LinkedNotebook() {
    }

    public function get id():Number {
      return this._id;
    }

    public function set id(id:Number):void {
      this._id = id;
      this.__isset_id = true;
    }

    public function unsetId():void {
      this.__isset_id = false;
    }

    // Returns true if field id is set (has been asigned a value) and false otherwise
    public function isSetId():Boolean {
      return this.__isset_id;
    }

    public function get shareName():String {
      return this._shareName;
    }

    public function set shareName(shareName:String):void {
      this._shareName = shareName;
    }

    public function unsetShareName():void {
      this.shareName = null;
    }

    // Returns true if field shareName is set (has been asigned a value) and false otherwise
    public function isSetShareName():Boolean {
      return this.shareName != null;
    }

    public function get username():String {
      return this._username;
    }

    public function set username(username:String):void {
      this._username = username;
    }

    public function unsetUsername():void {
      this.username = null;
    }

    // Returns true if field username is set (has been asigned a value) and false otherwise
    public function isSetUsername():Boolean {
      return this.username != null;
    }

    public function get shardId():String {
      return this._shardId;
    }

    public function set shardId(shardId:String):void {
      this._shardId = shardId;
    }

    public function unsetShardId():void {
      this.shardId = null;
    }

    // Returns true if field shardId is set (has been asigned a value) and false otherwise
    public function isSetShardId():Boolean {
      return this.shardId != null;
    }

    public function get shareKey():String {
      return this._shareKey;
    }

    public function set shareKey(shareKey:String):void {
      this._shareKey = shareKey;
    }

    public function unsetShareKey():void {
      this.shareKey = null;
    }

    // Returns true if field shareKey is set (has been asigned a value) and false otherwise
    public function isSetShareKey():Boolean {
      return this.shareKey != null;
    }

    public function get uri():String {
      return this._uri;
    }

    public function set uri(uri:String):void {
      this._uri = uri;
    }

    public function unsetUri():void {
      this.uri = null;
    }

    // Returns true if field uri is set (has been asigned a value) and false otherwise
    public function isSetUri():Boolean {
      return this.uri != null;
    }

    public function setFieldValue(fieldID:int, value:*):void {
      switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case SHARENAME:
        if (value == null) {
          unsetShareName();
        } else {
          this.shareName = value;
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          this.username = value;
        }
        break;

      case SHARDID:
        if (value == null) {
          unsetShardId();
        } else {
          this.shardId = value;
        }
        break;

      case SHAREKEY:
        if (value == null) {
          unsetShareKey();
        } else {
          this.shareKey = value;
        }
        break;

      case URI:
        if (value == null) {
          unsetUri();
        } else {
          this.uri = value;
        }
        break;

      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function getFieldValue(fieldID:int):* {
      switch (fieldID) {
      case ID:
        return this.id;
      case SHARENAME:
        return this.shareName;
      case USERNAME:
        return this.username;
      case SHARDID:
        return this.shardId;
      case SHAREKEY:
        return this.shareKey;
      case URI:
        return this.uri;
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public function isSet(fieldID:int):Boolean {
      switch (fieldID) {
      case ID:
        return isSetId();
      case SHARENAME:
        return isSetShareName();
      case USERNAME:
        return isSetUsername();
      case SHARDID:
        return isSetShardId();
      case SHAREKEY:
        return isSetShareKey();
      case URI:
        return isSetUri();
      default:
        throw new ArgumentError("Field " + fieldID + " doesn't exist!");
      }
    }

    public function read(iprot:TProtocol):void {
      var field:TField;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case ID:
            if (field.type == TType.DOUBLE) {
              this.id = iprot.readDouble();
              this.__isset_id = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SHARENAME:
            if (field.type == TType.STRING) {
              this.shareName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case USERNAME:
            if (field.type == TType.STRING) {
              this.username = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SHARDID:
            if (field.type == TType.STRING) {
              this.shardId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case SHAREKEY:
            if (field.type == TType.STRING) {
              this.shareKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case URI:
            if (field.type == TType.STRING) {
              this.uri = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public function write(oprot:TProtocol):void {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeDouble(this.id);
      oprot.writeFieldEnd();
      if (this.shareName != null) {
        oprot.writeFieldBegin(SHARE_NAME_FIELD_DESC);
        oprot.writeString(this.shareName);
        oprot.writeFieldEnd();
      }
      if (this.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(this.username);
        oprot.writeFieldEnd();
      }
      if (this.shardId != null) {
        oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
        oprot.writeString(this.shardId);
        oprot.writeFieldEnd();
      }
      if (this.shareKey != null) {
        oprot.writeFieldBegin(SHARE_KEY_FIELD_DESC);
        oprot.writeString(this.shareKey);
        oprot.writeFieldEnd();
      }
      if (this.uri != null) {
        oprot.writeFieldBegin(URI_FIELD_DESC);
        oprot.writeString(this.uri);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public function toString():String {
      var ret:String = new String("LinkedNotebook(");
      var first:Boolean = true;

      if (isSetId()) {
        ret += "id:";
        ret += this.id;
        first = false;
      }
      if (isSetShareName()) {
        if (!first) ret +=  ", ";
        ret += "shareName:";
        if (this.shareName == null) {
          ret += "null";
        } else {
          ret += this.shareName;
        }
        first = false;
      }
      if (isSetUsername()) {
        if (!first) ret +=  ", ";
        ret += "username:";
        if (this.username == null) {
          ret += "null";
        } else {
          ret += this.username;
        }
        first = false;
      }
      if (isSetShardId()) {
        if (!first) ret +=  ", ";
        ret += "shardId:";
        if (this.shardId == null) {
          ret += "null";
        } else {
          ret += this.shardId;
        }
        first = false;
      }
      if (isSetShareKey()) {
        if (!first) ret +=  ", ";
        ret += "shareKey:";
        if (this.shareKey == null) {
          ret += "null";
        } else {
          ret += this.shareKey;
        }
        first = false;
      }
      if (isSetUri()) {
        if (!first) ret +=  ", ";
        ret += "uri:";
        if (this.uri == null) {
          ret += "null";
        } else {
          ret += this.uri;
        }
        first = false;
      }
      ret += ")";
      return ret;
    }

    public function validate():void {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}
